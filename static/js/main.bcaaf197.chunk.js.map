{"version":3,"sources":["keycloak.ts","pages/Home.tsx","pages/Login.tsx","routes/utils.tsx","routes/index.tsx","serviceWorker.ts","index.tsx"],"names":["keycloak","Keycloak","url","realm","clientId","HomePage","useKeycloak","useState","showToken","setShowToken","authenticated","type","onClick","logout","console","log","token","tokenParsed","style","padding","JSON","stringify","LoginPage","currentLocationState","useLocation","state","from","pathname","login","useCallback","to","PrivateRoute","Component","component","rest","render","props","location","AppRouter","initialized","path","Boolean","window","hostname","match","ReactDOM","authClient","onEvent","event","error","onTokens","tokens","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"wPAUeA,E,MANEC,GAAS,CACxBC,IAAK,uCACLC,MAAO,aACPC,SAAU,c,8BCFL,SAASC,IACd,IAAQL,EAAaM,cAAbN,SACR,EAAkCO,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAQA,OACE,gCACE,gCACA,4CACW,OAACT,QAAD,IAACA,OAAD,EAACA,EAAUU,eAAyB,GAAT,OADtC,uBAEI,OAACV,QAAD,IAACA,OAAD,EAACA,EAAUU,gBACX,wBAAQC,KAAK,SAASC,QAAS,kBAAMZ,EAASa,UAA9C,oBAKF,wBAAQF,KAAK,SAASC,QAjBZ,WACdH,GAAa,GACbK,QAAQC,IAAR,OAAYf,QAAZ,IAAYA,OAAZ,EAAYA,EAAUgB,OACtBF,QAAQC,IAAR,OAAYf,QAAZ,IAAYA,OAAZ,EAAYA,EAAUiB,cAclB,uCAIF,8BACGT,GACC,sBAAKU,MAAO,CAACC,QAAS,OAAtB,UACE,gDACA,4BAAIC,KAAKC,WAAkB,OAARrB,QAAQ,IAARA,OAAA,EAAAA,EAAUgB,QAAS,MACtC,mDACA,4BAAII,KAAKC,WAAkB,OAARrB,QAAQ,IAARA,OAAA,EAAAA,EAAUiB,cAAe,cC9BjD,SAASK,IACd,IACMC,EADWC,cACqBC,OAAS,CAC7CC,KAAM,CAAEC,SAAU,UAGZ3B,EAAaM,cAAbN,SAEF4B,EAAQC,uBAAY,WAChB,OAAR7B,QAAQ,IAARA,KAAU4B,UACT,CAAC5B,IAEJ,cAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAUU,eACL,cAAC,IAAD,CAAUoB,GAAE,OAAEP,QAAF,IAAEA,OAAF,EAAEA,EAAsBG,OAG3C,8BACE,wBAAQf,KAAK,SAASC,QAASgB,EAA/B,qB,oCCXC,SAASG,EAAT,GAGiB,IAFXC,EAEU,EAFrBC,UACGC,EACkB,iBACblC,EAAaM,cAAbN,SAER,OACE,cAAC,IAAD,2BACMkC,GADN,IAEEC,OAAQ,SAACC,GAAD,OACE,OAARpC,QAAQ,IAARA,OAAA,EAAAA,EAAUU,eACR,cAACsB,EAAD,eAAeI,IAEf,cAAC,IAAD,CACEN,GAAI,CACFH,SAAU,SACVF,MAAO,CAAEC,KAAMU,EAAMC,iBCnB5B,IAAMC,EAAY,WAGvB,OAFwBhC,cAAhBiC,YAON,eAAC,IAAD,WACE,cAAC,IAAD,CAAUb,KAAK,IAAII,GAAG,UACtB,cAACC,EAAD,CAAcS,KAAK,QAAQP,UAAW5B,IACtC,cAAC,IAAD,CAAOmC,KAAK,SAASP,UAAWX,OAP3B,8CCDSmB,QACW,cAA7BC,OAAOL,SAASM,UAEe,UAA7BD,OAAOL,SAASM,UAEhBD,OAAOL,SAASM,SAASC,MACvB,2D,MCCNC,IAASV,OACP,cAAC,aAAD,UACE,cAAC,IAAD,CACEW,WAAY9C,EACZ+C,QAZc,SAACC,EAAgBC,GACnCnC,QAAQC,IAAI,kBAAmBiC,EAAOC,IAYlCC,SATc,SAACC,GACnBrC,QAAQC,IAAI,mBAAoBoC,IAK9B,SAKE,cAAC,EAAD,QAGJC,SAASC,eAAe,SD8GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAX,GACLnC,QAAQmC,MAAMA,EAAMY,c","file":"static/js/main.bcaaf197.chunk.js","sourcesContent":["import Keycloak from 'keycloak-js';\n\n// Setup Keycloak instance as needed\n// Pass initialization options as required or leave blank to load from 'keycloak.json'\nconst keycloak = Keycloak({\n  url: 'http://auth.qa.goexpression.com/auth',\n  realm: 'demo-realm',\n  clientId: 'react-app'\n});\n\nexport default keycloak;\n","import * as React from 'react'\n\nimport { useKeycloak } from '@react-keycloak/web'\nimport { useState } from 'react'\n\nexport function HomePage () {\n  const { keycloak } = useKeycloak()\n  const [showToken, setShowToken] = useState(false)\n\n  const callApi = () => {\n    setShowToken(true)\n    console.log(keycloak?.token)\n    console.log(keycloak?.tokenParsed)\n  }\n\n  return (\n    <div>\n      <div>\n      <div>\n        User is {!keycloak?.authenticated ? 'NOT ' : ''} authenticated</div>\n        {!!keycloak?.authenticated && (\n          <button type=\"button\" onClick={() => keycloak.logout()}>\n            Logout\n          </button>\n        )}\n\n        <button type=\"button\" onClick={callApi}>\n          Show token and details\n        </button>\n      </div>\n      <div>\n        {showToken && (\n          <div style={{padding: '1em'}}>\n            <strong>JWT Token:</strong>\n            <p>{JSON.stringify(keycloak?.token || '')}</p>\n            <strong>JWT content: </strong>\n            <p>{JSON.stringify(keycloak?.tokenParsed || {})}</p>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n","import * as React from 'react'\nimport { useCallback } from 'react'\nimport { Redirect, useLocation } from 'react-router-dom'\n\nimport { useKeycloak } from '@react-keycloak/web'\n\nexport function LoginPage () {\n  const location = useLocation<{ [key: string]: unknown }>()\n  const currentLocationState = location.state || {\n    from: { pathname: '/home' },\n  }\n\n  const { keycloak } = useKeycloak()\n\n  const login = useCallback(() => {\n    keycloak?.login()\n  }, [keycloak])\n\n  if (keycloak?.authenticated)\n    return <Redirect to={currentLocationState?.from as string} />\n\n  return (\n    <div>\n      <button type=\"button\" onClick={login}>\n        Login\n      </button>\n    </div>\n  )\n}\n","import * as React from 'react'\nimport { Route, Redirect, RouteComponentProps } from 'react-router-dom'\nimport type { RouteProps } from 'react-router-dom'\n\nimport { useKeycloak } from '@react-keycloak/web'\n\ninterface PrivateRouteParams extends RouteProps {\n  component:\n    | React.ComponentType<RouteComponentProps<any>>\n    | React.ComponentType<any>\n}\n\nexport function PrivateRoute({\n  component: Component,\n  ...rest\n}: PrivateRouteParams) {\n  const { keycloak } = useKeycloak()\n\n  return (\n    <Route\n      {...rest}\n      render={(props) =>\n        keycloak?.authenticated ? (\n          <Component {...props} />\n        ) : (\n          <Redirect\n            to={{\n              pathname: '/login',\n              state: { from: props.location },\n            }}\n          />\n        )\n      }\n    />\n  )\n}\n","import { BrowserRouter as Router, Redirect, Route } from 'react-router-dom'\n\nimport { useKeycloak } from '@react-keycloak/web'\n\nimport { HomePage } from '../pages/Home'\nimport { LoginPage } from '../pages/Login'\n\nimport { PrivateRoute } from './utils'\n\nexport const AppRouter = () => {\n  const { initialized } = useKeycloak()\n\n  if (!initialized) {\n    return <div>Loading...</div>\n  }\n\n  return (\n    <Router>\n      <Redirect from=\"/\" to=\"/home\" />\n      <PrivateRoute path=\"/home\" component={HomePage} />\n      <Route path=\"/login\" component={LoginPage} />\n    </Router>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { ReactKeycloakProvider } from '@react-keycloak/web'\n\nimport keycloak from './keycloak'\nimport { AppRouter } from './routes'\nimport * as serviceWorker from './serviceWorker'\n\nimport './index.css'\n\nconst eventLogger = (event: unknown, error: unknown) => {\n  console.log('onKeycloakEvent', event, error)\n}\n\nconst tokenLogger = (tokens: unknown) => {\n  console.log('onKeycloakTokens', tokens)\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <ReactKeycloakProvider\n      authClient={keycloak}\n      onEvent={eventLogger}\n      onTokens={tokenLogger}\n    >\n      <AppRouter />\n    </ReactKeycloakProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}